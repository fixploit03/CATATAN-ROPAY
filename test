#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <getopt.h>

// Struktur untuk menyimpan argumen
struct Arguments {
    char *device;        // Perangkat flashdisk (contoh: /dev/sdb)
    char *isoMountPoint; // Direktori ISO diekstrak
    char *mountPoint;    // Direktori mount flashdisk
};

// Fungsi untuk menampilkan bantuan
void printHelp() {
    printf("Penggunaan: sudo ./make_bootable_usb [OPSI]\n");
    printf("Membuat bootable flashdisk untuk instalasi Windows di Linux.\n\n");
    printf("Opsi:\n");
    printf("  -d, --device=DEVICE       Perangkat flashdisk (contoh: /dev/sdb)\n");
    printf("  -i, --iso=PATH           Direktori tempat ISO Windows diekstrak (contoh: /mnt/windows_iso)\n");
    printf("  -m, --mount=PATH         Direktori mount untuk flashdisk (contoh: /mnt/usb)\n");
    printf("  -h, --help               Tampilkan bantuan ini\n\n");
    printf("Contoh: sudo ./make_bootable_usb --device=/dev/sdb --iso=/mnt/windows_iso --mount=/mnt/usb\n");
    printf("Catatan: Jalankan dengan sudo, pastikan ms-sys terinstal untuk boot sector Windows.\n");
}

int main(int argc, char *argv[]) {
    struct Arguments args = {NULL, NULL, NULL};

    // Definisi opsi untuk getopt_long
    static struct option long_options[] = {
        {"device", required_argument, 0, 'd'},
        {"iso", required_argument, 0, 'i'},
        {"mount", required_argument, 0, 'm'},
        {"help", no_argument, 0, 'h'},
        {0, 0, 0, 0}
    };

    int opt;
    int option_index = 0;

    // Parsing argumen
    while ((opt = getopt_long(argc, argv, "d:i:m:h", long_options, &option_index)) != -1) {
        switch (opt) {
            case 'd':
                args.device = optarg;
                break;
            case 'i':
                args.isoMountPoint = optarg;
                break;
            case 'm':
                args.mountPoint = optarg;
                break;
            case 'h':
                printHelp();
                return 0;
            default:
                printHelp();
                return 1;
        }
    }

    // Validasi argumen
    if (!args.device || !args.isoMountPoint || !args.mountPoint) {
        fprintf(stderr, "Error: Semua opsi --device, --iso, dan --mount harus disediakan.\n");
        printHelp();
        return 1;
    }

    char command[512];

    // Langkah 1: Membuat partisi baru menggunakan parted
    printf("Membuat partisi baru di %s...\n", args.device);
    snprintf(command, sizeof(command), "parted -s %s mklabel msdos mkpart primary ntfs 1MiB 100%% set 1 boot on", args.device);
    if (system(command) != 0) {
        fprintf(stderr, "Gagal membuat partisi!\n");
        return 1;
    }

    // Langkah 2: Memformat partisi sebagai NTFS
    printf("Memformat partisi sebagai NTFS...\n");
    snprintf(command, sizeof(command), "mkfs.ntfs -f %s1", args.device);
    if (system(command) != 0) {
        fprintf(stderr, "Gagal memformat partisi!\n");
        return 1;
    }

    // Langkah 3: Membuat direktori mount dan mount partisi
    printf("Mounting flashdisk ke %s...\n", args.mountPoint);
    snprintf(command, sizeof(command), "mkdir -p %s && mount %s1 %s", args.mountPoint, args.device, args.mountPoint);
    if (system(command) != 0) {
        fprintf(stderr, "Gagal mount flashdisk!\n");
        return 1;
    }

    // Langkah 4: Menyalin file ISO ke flashdisk
    printf("Menyalin file ISO ke flashdisk...\n");
    snprintf(command, sizeof(command), "rsync -av --progress %s/ %s/", args.isoMountPoint, args.mountPoint);
    if (system(command) != 0) {
        fprintf(stderr, "Gagal menyalin file!\n");
        snprintf(command, sizeof(command), "umount %s", args.mountPoint);
        system(command);
        return 1;
    }

    // Langkah 5: Menulis MBR untuk boot Windows (opsional, memerlukan ms-sys)
    printf("Menulis MBR untuk boot Windows...\n");
    snprintf(command, sizeof(command), "ms-sys -7 %s", args.device);
    if (system(command) != 0) {
        printf("Peringatan: Gagal menulis MBR (pastikan ms-sys terinstal). Flashdisk mungkin tidak bootable.\n");
    }

    // Langkah 6: Unmount flashdisk
    printf("Unmount flashdisk...\n");
    snprintf(command, sizeof(command), "umount %s", args.mountPoint);
    if (system(command) != 0) {
        fprintf(stderr, "Gagal unmount flashdisk!\n");
        return 1;
    }

    printf("Proses selesai! Flashdisk sekarang siap untuk instalasi Windows.\n");
    return 0;
}
